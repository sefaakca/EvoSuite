/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 27 19:55:54 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.PushbackReader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedStreamTokenizer_ESTest extends ImprovedStreamTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('1');
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('D');
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('/');
      assertEquals((byte) (-8), byte0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(pushbackReader0, "", "", true);
      Byte byte0 = improvedStreamTokenizer0.nextByteObject();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(bufferedReader0, "non-number", "non-number", false);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(529L);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(charArrayReader0);
      try { 
        improvedStreamTokenizer0.nextBool();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")uyn");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, ")uyn", ")uyn", false);
      try { 
        improvedStreamTokenizer0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-boolean
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(charArrayReader0);
      improvedStreamTokenizer0.nextBoolean();
      assertEquals("Token[&], line 1", improvedStreamTokenizer0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(529L);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(charArrayReader0);
      String string0 = improvedStreamTokenizer0.nextWord();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(B%8~");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "", "(B%8~", false);
      try { 
        improvedStreamTokenizer0.nextWord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-string
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(bufferedReader0, "non-number", "non-number", false);
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-byte
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yP vnjbwf");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "yP vnjbwf", "yP vnjbwf", true);
      try { 
        improvedStreamTokenizer0.nextInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-number
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&Kr)p5M0jX");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&Kr)p5M0jX\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
