/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 14 09:10:44 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedStreamTokenizer_ESTest extends ImprovedStreamTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('u');
      assertEquals((byte)62, byte0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('7');
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('*');
      assertEquals((byte) (-13), byte0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PUVB");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.quoteCharacters("PUVB");
      try { 
        improvedStreamTokenizer0.nextByteObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-byte
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(charArrayReader0, "unexpected end of input", "unexpected end of input", true);
      improvedStreamTokenizer0.nextBool();
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'O';
      charArray0[1] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(charArrayReader0);
      improvedStreamTokenizer0.nextByte();
      try { 
        improvedStreamTokenizer0.nextBool();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 21);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(pipedReader0);
      pipedWriter0.close();
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(lineNumberReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'u';
      charArray0[2] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(charArrayReader0);
      improvedStreamTokenizer0.nextWord();
      String string0 = improvedStreamTokenizer0.nextWord();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(charArrayReader0);
      try { 
        improvedStreamTokenizer0.nextWord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-string
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1zCY4QkA^HY6");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "tNByli%hS9]hH|[M#-", "", false);
      improvedStreamTokenizer0.quoteCharacters("1zCY4QkA^HY6");
      try { 
        improvedStreamTokenizer0.nextInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-number
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }
}
