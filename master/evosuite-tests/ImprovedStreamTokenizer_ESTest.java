/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 06 13:39:10 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedStreamTokenizer_ESTest extends ImprovedStreamTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex(' ');
      assertEquals((byte) (-23), byte0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('3');
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=x0,V,&hV2$,+iS");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.ordinaryChar(0);
      improvedStreamTokenizer0.initializeSyntax();
      ImprovedStreamTokenizer.charToHex('w');
      improvedStreamTokenizer0.quoteCharacters("=x0,V,&hV2$,+iS");
      try { 
        improvedStreamTokenizer0.nextWord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-string
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '!';
      charArray0[2] = '~';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(charArrayReader0);
      try { 
        improvedStreamTokenizer0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-boolean
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.whiteSpaceCharacter((-2578));
      improvedStreamTokenizer0.nextWord();
      stringReader0.ready();
      try { 
        improvedStreamTokenizer0.nextBool();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3e3>]H.v,;o");
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 341);
      LineNumberReader lineNumberReader1 = new LineNumberReader(lineNumberReader0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(lineNumberReader1);
      boolean boolean0 = improvedStreamTokenizer0.nextBool();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(pushbackReader0, "", "", false);
      improvedStreamTokenizer0.nextByteObject();
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1678);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(pipedReader0, "p?>KBVhdU4M&x", "JEF)Jm)JEeG}g/", true);
      improvedStreamTokenizer0.whiteSpaceCharacter(1678);
      assertEquals("Token[NOTHING], line 1", improvedStreamTokenizer0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(pipedReader0);
      improvedStreamTokenizer0.whiteSpaceCharacter(5306);
      assertEquals(0.0, improvedStreamTokenizer0.nval, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('C');
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H}/MH[|<@T");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      byte byte0 = improvedStreamTokenizer0.nextByte();
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=UHJV?jqTi#E!h");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=UHJV?jqTi#E!h\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(pipedReader0, "", "", false);
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(pipedReader0);
      assertEquals(34, ImprovedStreamTokenizer.QUOTE_CHAR);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        Charset.isSupported("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
