/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 17 13:05:15 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPFile_ESTest extends FTPFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isUnknown());
      
      fTPFile0.setType(1);
      String string0 = fTPFile0.toFormattedString("OtuJHU%QW#c{6Ap3RD");
      assertEquals("d---------    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(0);
      String string0 = fTPFile0.toFormattedString();
      assertEquals("----------    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 798, 2, 0, 2, 1891);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString();
      assertEquals("?---------    0                         -1 0066-07-02 00:33:31 GMT null", string0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.clear();
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("");
      assertEquals("?---------    0                         -1 1970-01-01 null", string0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      timeZone0.setID("");
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("oy6&ZxmD^F-m@H>");
      assertEquals("?---------    0                         -1 2014-02-14 20:21:21.320 GMT null", string0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("J:w.");
      boolean boolean0 = fTPFile0.hasPermission(0, 2617);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("&, m");
      String string0 = fTPFile0.toFormattedString("KtpFB5mzj{z");
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(1);
      boolean boolean0 = fTPFile0.isUnknown();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertFalse(boolean0);
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(0);
      boolean boolean0 = fTPFile0.isFile();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isFile();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(boolean0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(1);
      boolean boolean0 = fTPFile0.isDirectory();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("&, m");
      boolean boolean0 = fTPFile0.isDirectory();
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(boolean0);
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("&, m");
      fTPFile0.getLink();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("&, m");
      fTPFile0.setGroup("[Gk6Kh~^TZX2,P9O");
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      int int0 = fTPFile0.getType();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.toString();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("&, m");
      fTPFile0.setLink("KtpFB5mzj{z");
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setUser("Qg+?wVLN");
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 0, false);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals((-1L), fTPFile0.getSize());
      
      fTPFile0.setSize(1L);
      assertEquals(1L, fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setName((String) null);
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setHardLinkCount((-856));
      assertEquals((-856), fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setRawListing("=Q9*;+P");
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }
}
