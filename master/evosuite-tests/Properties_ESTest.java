/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 17 10:27:55 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import java.util.Enumeration;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Properties_ESTest extends Properties_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Properties properties0 = new Properties();
      Integer integer0 = new Integer(14);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.merge("2", integer0, biFunction0);
      Set<String> set0 = properties0.stringPropertyNames();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      Set<String> set0 = properties1.stringPropertyNames();
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      Enumeration<?> enumeration0 = properties1.propertyNames();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Properties properties0 = new Properties();
      Integer integer0 = new Integer(14);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.merge("2", integer0, biFunction0);
      MockFile mockFile0 = new MockFile("tz)/.#|+8!#+WA");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        properties0.list((PrintWriter) mockPrintWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Properties properties0 = new Properties();
      String string0 = "Malformed \\uxxxx encoding.";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, false);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, false);
      properties0.list((PrintWriter) mockPrintWriter0);
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Properties properties0 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream("_uGfA W+m jv &Tz:");
      properties0.setProperty("g`i871 d5i?=Vla", "");
      properties0.list((PrintStream) mockPrintStream0);
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      String string0 = properties1.getProperty("vf)=[w39| I", "HqjE");
      assertEquals("HqjE", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.setProperty("Y_JNoDx'~", "Y_JNoDx'~");
      String string0 = properties0.getProperty("Y_JNoDx'~", "[Yxfc_N.<l");
      assertEquals("Y_JNoDx'~", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Properties properties0 = new Properties();
      MockFile mockFile0 = new MockFile("F\"!gG OP", "*x}Ot");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 33);
      properties0.store((Writer) bufferedWriter0, "");
      assertEquals(32L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Properties properties0 = new Properties();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      properties0.setProperty("wD 'WH\"_iDbwWCZc", "wD 'WH\"_iDbwWCZc");
      String string0 = "Malformed \\uxxxx encoding.";
      properties0.store((Writer) mockPrintWriter0, string0);
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Properties properties0 = new Properties();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      properties0.load((InputStream) byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, properties0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Properties properties0 = new Properties();
      StringReader stringReader0 = new StringReader(":,=Ol4&");
      properties0.load((Reader) stringReader0);
      assertEquals(1, properties0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("4xU^y;", false);
      properties0.save(mockFileOutputStream0, "a9$KG^r5j6jc");
      assertEquals(0, properties0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Properties properties0 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream("_uGfA W+m jv &Tz:");
      properties0.setProperty("g`i871 d5i?=Vla", "");
      properties0.store((OutputStream) mockPrintStream0, "");
      assertFalse(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.setProperty("5!dOYritJIM2N{", "<Yv^B 'cZ);{TARqu");
      Set<String> set0 = properties0.stringPropertyNames();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Properties properties0 = new Properties((Properties) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      properties0.store((OutputStream) byteArrayOutputStream0, (String) null);
      assertEquals(30, byteArrayOutputStream0.size());
      assertEquals("#Fri Feb 14 20:21:21 GMT 2014\n", byteArrayOutputStream0.toString());
  }
}
