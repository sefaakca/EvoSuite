/*
 * This file was automatically generated by EvoSuite
 * Sun Aug 27 16:55:45 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenDispenser_ESTest extends TokenDispenser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser(")KF`~Bz$)PeNhgQz\rG");
      assertFalse(tokenDispenser0.tokenIsRightParen());
      
      tokenDispenser0.advance();
      boolean boolean0 = tokenDispenser0.tokenIsRightParen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("en* oinmht");
      boolean boolean0 = tokenDispenser0.tokenIsRightParen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      assertFalse(tokenDispenser0.tokenIsLeftParen());
      
      tokenDispenser0.ttype = 40;
      boolean boolean0 = tokenDispenser0.tokenIsLeftParen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser(")KF`~Bz$)PeNhgQz\rG");
      boolean boolean0 = tokenDispenser0.tokenIsLeftParen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("Error calling nextToken in TokenDispenser");
      assertFalse(tokenDispenser0.tokenIsOperator());
      
      tokenDispenser0.ttype = 47;
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("Plr3*jiTXed&");
      tokenDispenser0.advance();
      assertFalse(tokenDispenser0.tokenIsOperator());
      
      tokenDispenser0.advance();
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("w@-7Q.iPsG:vSq~|`a{");
      tokenDispenser0.advance();
      tokenDispenser0.advance();
      tokenDispenser0.advance();
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertEquals(45, tokenDispenser0.ttype);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser(")KF`~Bz$)PeNhgQz\rG");
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      assertFalse(tokenDispenser0.tokenIsOperator());
      
      tokenDispenser0.ttype = 43;
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("Error calling nextToken in TokenDispenser");
      assertFalse(tokenDispenser0.tokenIsWord());
      
      tokenDispenser0.nextToken();
      tokenDispenser0.getToken();
      assertTrue(tokenDispenser0.tokenIsWord());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("62WYI1s%3+G|{fl2_}M");
      tokenDispenser0.advance();
      tokenDispenser0.getToken();
      assertEquals(62.0, tokenDispenser0.getNumber(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      assertFalse(tokenDispenser0.tokenIsEOF());
      
      tokenDispenser0.advance();
      tokenDispenser0.getToken();
      assertTrue(tokenDispenser0.tokenIsEOF());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser(")KF`~Bz$)PeNhgQz\rG");
      Object object0 = tokenDispenser0.getToken();
      assertNotNull(object0);
      assertEquals('\uFFFC', object0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      char char0 = tokenDispenser0.getChar();
      assertEquals('\uFFFC', char0);
  }
}
