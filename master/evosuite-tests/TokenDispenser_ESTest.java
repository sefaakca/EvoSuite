/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 16 15:23:00 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenDispenser_ESTest extends TokenDispenser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("~@F/j#?t]0");
      tokenDispenser0.commentChar(0);
      tokenDispenser0.nextToken();
      tokenDispenser0.eolIsSignificant(false);
      tokenDispenser0.ttype = 0;
      tokenDispenser0.wordChars((-467), (-721));
      tokenDispenser0.tokenIsNumber();
      tokenDispenser0.advance();
      tokenDispenser0.advance();
      tokenDispenser0.resetSyntax();
      tokenDispenser0.ordinaryChars((-1), 126);
      tokenDispenser0.quoteChar((-3120));
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.whitespaceChars((-1373), (-1));
      tokenDispenser0.getWord();
      tokenDispenser0.getChar();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.getNumber();
      tokenDispenser0.getToken();
      assertEquals('/', tokenDispenser0.getChar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("3DA#D.keXxZ.");
      tokenDispenser0.slashSlashComments(false);
      tokenDispenser0.parseNumbers();
      tokenDispenser0.getWord();
      tokenDispenser0.advance();
      tokenDispenser0.quoteChar(0);
      tokenDispenser0.parseNumbers();
      tokenDispenser0.getToken();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.advance();
      tokenDispenser0.resetSyntax();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.getToken();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.getWord();
      assertEquals(3.0, tokenDispenser0.getNumber(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("B&1(@: H5");
      tokenDispenser0.ordinaryChars((-1635), (-4405));
      tokenDispenser0.whitespaceChars((-1789), (-3408));
      tokenDispenser0.wordChars((-1635), (-1635));
      tokenDispenser0.advance();
      tokenDispenser0.ordinaryChars(42, 42);
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.advance();
      tokenDispenser0.getToken();
      tokenDispenser0.nextToken();
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.getNumber();
      tokenDispenser0.tokenIsLeftParen();
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.getToken();
      boolean boolean0 = tokenDispenser0.tokenIsNumber();
      assertEquals(1.0, tokenDispenser0.getNumber(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser(" )U+NX['yd#*._");
      tokenDispenser0.slashSlashComments(false);
      tokenDispenser0.eolIsSignificant(true);
      tokenDispenser0.whitespaceChars(0, (-570));
      tokenDispenser0.nval = (-1.0);
      tokenDispenser0.slashStarComments(true);
      tokenDispenser0.quoteChar(0);
      tokenDispenser0.wordChars(0, 0);
      tokenDispenser0.pushBack();
      assertFalse(tokenDispenser0.tokenIsRightParen());
      
      tokenDispenser0.advance();
      tokenDispenser0.slashSlashComments(false);
      tokenDispenser0.nval = 456.65921086;
      tokenDispenser0.nval = (-1008.12855);
      tokenDispenser0.pushBack();
      tokenDispenser0.ordinaryChars(1536, 0);
      tokenDispenser0.ordinaryChars((-4107), (-4107));
      tokenDispenser0.lowerCaseMode(false);
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.tokenIsNumber();
      boolean boolean0 = tokenDispenser0.tokenIsRightParen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("8+9");
      tokenDispenser0.quoteChar(228);
      tokenDispenser0.ordinaryChars((-119), 43);
      tokenDispenser0.ordinaryChar(43);
      tokenDispenser0.quoteChar(0);
      tokenDispenser0.pushBack();
      assertFalse(tokenDispenser0.tokenIsNumber());
      
      tokenDispenser0.nextToken();
      tokenDispenser0.slashSlashComments(true);
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.tokenIsNumber();
      boolean boolean0 = tokenDispenser0.tokenIsWord();
      assertTrue(tokenDispenser0.tokenIsNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      tokenDispenser0.resetSyntax();
      tokenDispenser0.lowerCaseMode(true);
      tokenDispenser0.commentChar(43);
      tokenDispenser0.whitespaceChars(43, 43);
      assertFalse(tokenDispenser0.tokenIsOperator());
      
      tokenDispenser0.ttype = 43;
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.getWord();
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.wordChars((-2167), 0);
      tokenDispenser0.getNumber();
      tokenDispenser0.commentChar((-2));
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.getWord();
      tokenDispenser0.tokenIsNumber();
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.getWord();
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.tokenIsNumber();
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("XQn&4Nw");
      tokenDispenser0.commentChar((-27));
      assertFalse(tokenDispenser0.tokenIsWord());
      
      tokenDispenser0.advance();
      tokenDispenser0.resetSyntax();
      tokenDispenser0.getWord();
      tokenDispenser0.getToken();
      assertTrue(tokenDispenser0.tokenIsWord());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      tokenDispenser0.ordinaryChar((-1940));
      assertFalse(tokenDispenser0.tokenIsEOF());
      
      tokenDispenser0.advance();
      tokenDispenser0.ordinaryChar((-3331));
      tokenDispenser0.getToken();
      boolean boolean0 = tokenDispenser0.tokenIsRightParen();
      assertTrue(tokenDispenser0.tokenIsEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("*@bo5Nb[[<H+\"}%/<k");
      tokenDispenser0.slashSlashComments(true);
      tokenDispenser0.parseNumbers();
      tokenDispenser0.slashStarComments(true);
      tokenDispenser0.wordChars(0, (-1778));
      tokenDispenser0.parseNumbers();
      assertFalse(tokenDispenser0.tokenIsOperator());
      
      tokenDispenser0.nextToken();
      tokenDispenser0.slashSlashComments(false);
      tokenDispenser0.getToken();
      tokenDispenser0.resetSyntax();
      tokenDispenser0.getNumber();
      tokenDispenser0.tokenIsNumber();
      tokenDispenser0.tokenIsNumber();
      tokenDispenser0.tokenIsLeftParen();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.getWord();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.getToken();
      tokenDispenser0.getWord();
      tokenDispenser0.tokenIsNumber();
      tokenDispenser0.getWord();
      assertTrue(tokenDispenser0.tokenIsOperator());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("5w8");
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("N");
      boolean boolean0 = tokenDispenser0.tokenIsLeftParen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      Object object0 = tokenDispenser0.getToken();
      assertEquals('\uFFFC', object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      boolean boolean0 = tokenDispenser0.tokenIsRightParen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("Error calling nextToken in TokenDispenser");
      tokenDispenser0.advance();
      assertEquals((-3), tokenDispenser0.ttype);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("5mCmAQs3A!|Aa$t");
      tokenDispenser0.getWord();
      boolean boolean0 = tokenDispenser0.tokenIsWord();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      tokenDispenser0.getNumber();
      char char0 = tokenDispenser0.getChar();
      assertEquals('\uFFFC', char0);
      
      boolean boolean0 = tokenDispenser0.tokenIsNumber();
      boolean boolean1 = tokenDispenser0.tokenIsEOF();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
