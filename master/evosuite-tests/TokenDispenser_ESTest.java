/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 08 19:52:10 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TokenDispenser_ESTest extends TokenDispenser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("<rKyA>3OIo&6");
      tokenDispenser0.lowerCaseMode(false);
      tokenDispenser0.wordChars(1, (-1588));
      tokenDispenser0.nextToken();
      tokenDispenser0.nextToken();
      tokenDispenser0.advance();
      tokenDispenser0.pushBack();
      tokenDispenser0.sval = "<rKyA>3OIo&6";
      tokenDispenser0.resetSyntax();
      assertFalse(tokenDispenser0.tokenIsOperator());
      
      tokenDispenser0.ttype = 47;
      tokenDispenser0.eolIsSignificant(false);
      tokenDispenser0.wordChars(1821, 1821);
      tokenDispenser0.pushBack();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.wordChars(47, 65532);
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsOperator();
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("TokenDispenser");
      tokenDispenser0.wordChars(0, 0);
      tokenDispenser0.pushBack();
      tokenDispenser0.ttype = (-1);
      tokenDispenser0.slashStarComments(false);
      tokenDispenser0.ttype = (-1);
      tokenDispenser0.parseNumbers();
      tokenDispenser0.sval = "";
      tokenDispenser0.slashStarComments(false);
      tokenDispenser0.ttype = (-1);
      tokenDispenser0.tokenIsOperator();
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      assertFalse(boolean0);
      
      tokenDispenser0.ttype = 45;
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsOperator();
      boolean boolean1 = tokenDispenser0.tokenIsOperator();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser(">) s[^:}fZt6");
      tokenDispenser0.whitespaceChars((-954), (-954));
      tokenDispenser0.wordChars((-954), (-954));
      tokenDispenser0.ttype = 0;
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.parseNumbers();
      tokenDispenser0.getToken();
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.getWord();
      tokenDispenser0.nextToken();
      tokenDispenser0.ttype = 0;
      tokenDispenser0.getNumber();
      tokenDispenser0.getNumber();
      tokenDispenser0.getWord();
      boolean boolean0 = tokenDispenser0.tokenIsRightParen();
      assertFalse(boolean0);
      
      tokenDispenser0.getToken();
      tokenDispenser0.getWord();
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.getWord();
      tokenDispenser0.getToken();
      assertTrue(tokenDispenser0.tokenIsRightParen());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("%9F S;~PL");
      tokenDispenser0.parseNumbers();
      tokenDispenser0.ordinaryChars(1146, 1435);
      tokenDispenser0.lowerCaseMode(true);
      tokenDispenser0.ttype = 43;
      tokenDispenser0.getNumber();
      tokenDispenser0.pushBack();
      tokenDispenser0.lowerCaseMode(true);
      tokenDispenser0.getToken();
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.ordinaryChar(1435);
      tokenDispenser0.resetSyntax();
      tokenDispenser0.commentChar(1146);
      tokenDispenser0.eolIsSignificant(false);
      tokenDispenser0.tokenIsNumber();
      tokenDispenser0.pushBack();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.getWord();
      tokenDispenser0.ordinaryChar((-1));
      tokenDispenser0.whitespaceChars(1146, 1146);
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsLeftParen();
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.tokenIsOperator();
      char char0 = tokenDispenser0.getChar();
      assertEquals('+', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("*W/TU(4T;i!S");
      tokenDispenser0.parseNumbers();
      tokenDispenser0.sval = "end of input";
      tokenDispenser0.commentChar(0);
      tokenDispenser0.eolIsSignificant(false);
      tokenDispenser0.nval = (double) (-2);
      tokenDispenser0.whitespaceChars(0, (-2));
      tokenDispenser0.nval = (-2962.880189);
      tokenDispenser0.commentChar((-138));
      tokenDispenser0.ordinaryChar(0);
      tokenDispenser0.sval = "";
      tokenDispenser0.ordinaryChar(0);
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.getToken();
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.ordinaryChar(0);
      tokenDispenser0.nextToken();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.getChar();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.getToken();
      tokenDispenser0.getChar();
      tokenDispenser0.getNumber();
      tokenDispenser0.tokenIsLeftParen();
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.getWord();
      boolean boolean0 = tokenDispenser0.tokenIsRightParen();
      assertEquals('*', tokenDispenser0.getChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("0+85,SzhJZ~PRulm");
      tokenDispenser0.eolIsSignificant(true);
      tokenDispenser0.tokenIsNumber();
      tokenDispenser0.pushBack();
      tokenDispenser0.parseNumbers();
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.getNumber();
      tokenDispenser0.getChar();
      tokenDispenser0.eolIsSignificant(false);
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.slashStarComments(false);
      tokenDispenser0.tokenIsLeftParen();
      tokenDispenser0.whitespaceChars(0, 0);
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.getWord();
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.getToken();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.nval = 0.0;
      tokenDispenser0.sval = null;
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsNumber();
      tokenDispenser0.getToken();
      tokenDispenser0.getToken();
      tokenDispenser0.getNumber();
      tokenDispenser0.getToken();
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsLeftParen();
      boolean boolean0 = tokenDispenser0.tokenIsEOF();
      assertEquals(85.0, tokenDispenser0.getNumber(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("('!KjZ=k=v2Y{=a`D0y");
      tokenDispenser0.resetSyntax();
      tokenDispenser0.whitespaceChars((-709), (-511));
      tokenDispenser0.nextToken();
      tokenDispenser0.wordChars(0, (-709));
      tokenDispenser0.wordChars(1056, 1056);
      tokenDispenser0.lowerCaseMode(false);
      tokenDispenser0.eolIsSignificant(false);
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.ordinaryChar(1056);
      tokenDispenser0.tokenIsLeftParen();
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.getChar();
      boolean boolean0 = tokenDispenser0.tokenIsEOF();
      assertEquals('(', tokenDispenser0.getChar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser(">) s[^:}fZt6");
      tokenDispenser0.whitespaceChars((-954), (-954));
      tokenDispenser0.wordChars((-954), (-954));
      tokenDispenser0.ttype = 0;
      tokenDispenser0.tokenIsOperator();
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.parseNumbers();
      tokenDispenser0.getToken();
      tokenDispenser0.tokenIsEOF();
      tokenDispenser0.getWord();
      tokenDispenser0.nextToken();
      tokenDispenser0.ttype = 0;
      tokenDispenser0.getNumber();
      tokenDispenser0.getNumber();
      tokenDispenser0.getWord();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.getToken();
      tokenDispenser0.getWord();
      tokenDispenser0.advance();
      tokenDispenser0.tokenIsRightParen();
      tokenDispenser0.getWord();
      tokenDispenser0.getToken();
      assertFalse(tokenDispenser0.tokenIsRightParen());
      assertTrue(tokenDispenser0.tokenIsWord());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("D%%;");
      tokenDispenser0.quoteChar(0);
      assertFalse(tokenDispenser0.tokenIsWord());
      
      tokenDispenser0.nextToken();
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.sval = "{R";
      tokenDispenser0.tokenIsWord();
      tokenDispenser0.getWord();
      assertTrue(tokenDispenser0.tokenIsWord());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("TokenDispenser");
      tokenDispenser0.wordChars(0, 0);
      tokenDispenser0.whitespaceChars((-152), 1783);
      assertFalse(tokenDispenser0.tokenIsEOF());
      
      tokenDispenser0.nextToken();
      tokenDispenser0.getToken();
      assertTrue(tokenDispenser0.tokenIsEOF());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("Vj{ep.%1]Hm;V>Y");
      tokenDispenser0.nextToken();
      double double0 = tokenDispenser0.getNumber();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      tokenDispenser0.advance();
      assertEquals('\uFFFF', tokenDispenser0.getChar());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      String string0 = tokenDispenser0.getWord();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("2k");
      char char0 = tokenDispenser0.getChar();
      assertEquals('\uFFFC', char0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TokenDispenser tokenDispenser0 = new TokenDispenser("");
      boolean boolean0 = tokenDispenser0.tokenIsOperator();
      boolean boolean1 = tokenDispenser0.tokenIsRightParen();
      assertFalse(boolean1);
      
      Object object0 = tokenDispenser0.getToken();
      assertEquals('\uFFFC', object0);
      
      boolean boolean2 = tokenDispenser0.tokenIsLeftParen();
      assertTrue(boolean2 == boolean0);
      assertFalse(tokenDispenser0.tokenIsWord());
      assertFalse(boolean2);
  }
}
