/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 17 11:18:26 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.LineNumberReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedTokenizer_ESTest extends ImprovedTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer((Reader) null, (String) null);
      improvedTokenizer0.myState = 128;
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: 128
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("ImprovedTokenizer", "ImprovedTokenizer");
      improvedTokenizer0.myState = 4;
      improvedTokenizer0.next();
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "invalid state: ");
      improvedTokenizer0.advance();
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: 1
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("7YUN/5IGtFE,f", "7YUN/5IGtFE,f");
      String string0 = improvedTokenizer0.next();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("8eN -q", "Xy9I}c&bh? 7[eB*");
      // Undeclared exception!
      try { 
        improvedTokenizer0.afterToken('h');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("ImprovedTokenizer", "ImprovedTokenizer");
      improvedTokenizer0.myState = 4;
      int int0 = improvedTokenizer0.stop();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("bZz", "bZz");
      boolean boolean0 = improvedTokenizer0.advance();
      assertFalse(boolean0);
      
      boolean boolean1 = improvedTokenizer0.advance();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("XKXc\"s73O;i", "~#et1;");
      improvedTokenizer0.advance();
      improvedTokenizer0.advance();
      // Undeclared exception!
      try { 
        improvedTokenizer0.stop();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, 5
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      boolean boolean0 = improvedTokenizer0.keepParsing(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("ImprovedTokenizer", "ImprovedTokenizer");
      improvedTokenizer0.myState = 4;
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '6';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(lineNumberReader0, "I\"anlBku1/k6,AcnR");
      boolean boolean0 = improvedTokenizer0.advance();
      assertTrue(boolean0);
      
      String string0 = improvedTokenizer0.next();
      assertEquals("\u0000", string0);
      
      boolean boolean1 = improvedTokenizer0.hasNext();
      assertEquals("6", improvedTokenizer0.previousDelimiter());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "invalid state: ");
      boolean boolean0 = improvedTokenizer0.advance();
      boolean boolean1 = improvedTokenizer0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[9];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(lineNumberReader0, "I\"anlBku1/k6,AcnR");
      improvedTokenizer0.advance();
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("invalid state: ", "invalid state: ");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("8eN -q", "Xy9I}c&bh? 7[eB*");
      String string0 = improvedTokenizer0.previousDelimiter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      improvedTokenizer0.initialize((InputStream) bufferedInputStream0, "");
      assertEquals(1, ImprovedTokenizer.STATE_STOP);
  }
}
