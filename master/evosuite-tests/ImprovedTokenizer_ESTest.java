/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 08 20:38:27 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.InputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedTokenizer_ESTest extends ImprovedTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+dfM=wF)ixqa=Yaq,O");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "Cnw+9iC\"Sb3k");
      improvedTokenizer0.stop();
      boolean boolean0 = improvedTokenizer0.advance();
      assertTrue(boolean0);
      
      int int0 = improvedTokenizer0.stop();
      assertEquals(5, int0);
      assertEquals("+", improvedTokenizer0.previousDelimiter());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("C4?#T2", "d.HCEYvyd(rm[Y#n");
      improvedTokenizer0.myState = (-2296);
      improvedTokenizer0.hasNext();
      int int0 = ImprovedTokenizer.BUF_SIZE;
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: -2296
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'L';
      charArray0[2] = 'C';
      charArray0[3] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read();
      improvedTokenizer0.initialize((Reader) charArrayReader0, "");
      improvedTokenizer0.myState = 13;
      // Undeclared exception!
      try { 
        improvedTokenizer0.advance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, 13
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q\nA%");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "ImprovedTokenizer");
      improvedTokenizer0.advance();
      stringReader0.mark(0);
      stringReader0.markSupported();
      improvedTokenizer0.hasNext();
      // Undeclared exception!
      try { 
        improvedTokenizer0.advance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, 5
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(",;X", "");
      improvedTokenizer0.hasNext();
      improvedTokenizer0.next();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q\nA%");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "ImprovedTokenizer");
      improvedTokenizer0.advance();
      stringReader0.mark(0);
      stringReader0.markSupported();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      improvedTokenizer0.myBuffer = stringBuffer0;
      // Undeclared exception!
      try { 
        improvedTokenizer0.advance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, 5
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("X%", "X%");
      improvedTokenizer0.myToken = "X%";
      boolean boolean0 = improvedTokenizer0.advance();
      assertFalse(boolean0);
      
      improvedTokenizer0.advance();
      improvedTokenizer0.advance();
      boolean boolean1 = improvedTokenizer0.keepParsing(1084);
      assertFalse(boolean1);
      
      int int0 = improvedTokenizer0.start('u');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("invalid state: ", "invalid state: ");
      improvedTokenizer0.advance();
      // Undeclared exception!
      try { 
        improvedTokenizer0.afterToken(' ');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer((Reader) null, "LNn6KZ");
      improvedTokenizer0.keepParsing(0);
      improvedTokenizer0.previousDelimiter();
      // Undeclared exception!
      try { 
        improvedTokenizer0.beforeToken('o');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("zBr3d2_dp::9-#KN", "zBr3d2_dp::9-#KN");
      improvedTokenizer0.start('');
      improvedTokenizer0.afterToken('%');
      improvedTokenizer0.keepParsing((-1));
      improvedTokenizer0.beforeToken('%');
      improvedTokenizer0.beforeToken('t');
      improvedTokenizer0.hasNext();
      improvedTokenizer0.hasNext();
      // Undeclared exception!
      try { 
        improvedTokenizer0.beforeToken('%');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(",aN-v5ZkR z9G%x", ",aN-v5ZkR z9G%x");
      // Undeclared exception!
      try { 
        improvedTokenizer0.initialize((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("dOY~ZnYb0+GujOoH", "ImprovedTokenizer");
      improvedTokenizer0.myPreviousDelimiter = "dOY~ZnYb0+GujOoH";
      int int0 = improvedTokenizer0.start(')');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("lcR;nACF{l.TMXr", "}");
      String string0 = improvedTokenizer0.previousDelimiter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer((Reader) null, "");
      // Undeclared exception!
      try { 
        improvedTokenizer0.afterToken('|');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = '{';
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader(charArray0, 69, 69);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("C4?#T2", "d.HCEYvyd(rm[Y#n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C4?#T2");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
      
      improvedTokenizer0.beforeToken('');
      improvedTokenizer0.next();
      assertEquals("C", improvedTokenizer0.previousDelimiter());
      
      boolean boolean1 = improvedTokenizer0.hasNext();
      assertEquals("#", improvedTokenizer0.previousDelimiter());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      improvedTokenizer0.hasNext();
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'L';
      charArray0[2] = 'C';
      charArray0[3] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      improvedTokenizer0.initialize((Reader) charArrayReader0, "");
      // Undeclared exception!
      try { 
        improvedTokenizer0.beforeToken('.');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "?ENa5q,\\@'";
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("?ENa5q,@'", "?ENa5q,@'");
      StringBuffer stringBuffer0 = new StringBuffer();
      improvedTokenizer0.next();
      improvedTokenizer0.myBuffer = stringBuffer0;
      stringBuffer0.append("?ENa5q,@'");
      stringBuffer0.append((long) 1);
      improvedTokenizer0.matchingToken('U');
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: 1
         //
         verifyException("ImprovedTokenizer", e);
      }
  }
}
