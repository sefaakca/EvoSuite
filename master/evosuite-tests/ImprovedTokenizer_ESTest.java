/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 14 08:39:12 GMT 2017
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedTokenizer_ESTest extends ImprovedTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      improvedTokenizer0.myState = 99;
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: 99
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("u[a0;uQ*EHTO7p", "ImprovedTokenizer");
      String string0 = improvedTokenizer0.next();
      assertNotNull(string0);
      
      String string1 = improvedTokenizer0.next();
      assertEquals("u[a0;uQ*EH", string1);
      
      String string2 = improvedTokenizer0.next();
      assertNotNull(string2);
      assertEquals("O7", string2);
      assertEquals("T", improvedTokenizer0.previousDelimiter());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "&6H");
      improvedTokenizer0.hasNext();
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: 1
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("%u}@L>@r", "/IH8?@D8Qh");
      // Undeclared exception!
      try { 
        improvedTokenizer0.afterToken('/');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("sQz$Iz4Ig7&\"#^d:P6", "");
      improvedTokenizer0.next();
      // Undeclared exception!
      try { 
        improvedTokenizer0.stop();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, 5
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("LL", "LL");
      String string0 = improvedTokenizer0.next();
      assertNull(string0);
      
      boolean boolean0 = improvedTokenizer0.advance();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("KF<O;", "invalid state: ");
      improvedTokenizer0.myState = (-678);
      // Undeclared exception!
      try { 
        improvedTokenizer0.advance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, -678
         //
         verifyException("ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("+cT3C>g[ ", "g<EQ;}");
      String string0 = improvedTokenizer0.next();
      assertEquals("+cT3C>", string0);
      assertNotNull(string0);
      
      boolean boolean0 = improvedTokenizer0.advance();
      assertEquals("g", improvedTokenizer0.previousDelimiter());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o)^ ");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "5m07L\"B9");
      boolean boolean0 = improvedTokenizer0.keepParsing(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("9\" @4G1", "q\"a9Coq");
      String string0 = improvedTokenizer0.next();
      assertNotNull(string0);
      
      String string1 = improvedTokenizer0.next();
      assertEquals("9\"", improvedTokenizer0.previousDelimiter());
      assertEquals(" @4G1", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("+cT3C>g[ ", "g<EQ;}");
      String string0 = improvedTokenizer0.next();
      assertNotNull(string0);
      assertEquals("+cT3C>", string0);
      
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      improvedTokenizer0.next();
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o)^ ");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "5m07L\"B9");
      improvedTokenizer0.hasNext();
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      String string0 = improvedTokenizer0.previousDelimiter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      // Undeclared exception!
      try { 
        improvedTokenizer0.initialize((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }
}
